# vim: set ft=yaml ts=2 expandtab:
#
# Copyright (c) Markus Falb <markus.falb@mafalb.at>
# GNU General Public License v3.0+
# see LICENSE or https://www.gnu.org/licenses/gpl-3.0.txt
---

name: Ci
on:  # yamllint disable-line rule:truthy
  workflow_call:
    inputs:
      targeted_branch:
        type: string

jobs:

  lint:
    uses: ./.github/workflows/reusable-yamllint.yml

  selectbranch:
    uses: ./.github/workflows/reusable-selectbranch.yml
    with:
      targeted_branch: ${{ inputs.targeted_branch }}

  ansiblecollection_info:
    runs-on: ubuntu-22.04
    needs: selectbranch
    steps:
      - name: Checkout workflows
        uses: actions/checkout@v4
      - name: Get Info about mafalb.ansible
        uses: ./.github/actions/ansiblecollectioninfo
        with:
          targeted_branch: dev  # FIX
          repository: mafalb/ansible-collection-ansible
      - name: Assertions
        run: |
          test "$collection_name" = "ansible"
          test "$namespace" = "mafalb"

  ansiblecollection_info_with_python:
    runs-on: ubuntu-22.04
    needs: selectbranch
    steps:
      - name: setup python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Checkout workflows
        uses: actions/checkout@v4
      - name: Get Info about mafalb.ansible
        uses: ./.github/actions/ansiblecollectioninfo
        with:
          targeted_branch: ${{ needs.selectbranch.outputs.ref }}
          repository: mafalb/ansible-collection-ansible
      - name: Assertions
        run: |
          test "$collection_name" = "ansible"
          test "$namespace" = "mafalb"

  crun:
    runs-on: ubuntu-22.04
    steps:
      - name: Build Container Image
        run: |
          cat - >Containerfile <<EOF
          FROM ubuntu:22.04
          RUN apt-get update && apt-get install -y systemd
          CMD ["/lib/systemd/systemd"]
          EOF
          podman build --tag ghtest .
      - name: Run Container fails
        run: |
          ! podman run --systemd always -d ghtest
      - name: Checkout workflows
        uses: actions/checkout@v4
      - name: Install crun
        uses: ./.github/actions/fixcrun
        with:
          checksums: CHECKSUMS
      - name: Verify version of crun
        run: crun --version|grep 1.14.4
      - name: Run Container
        run: podman run --systemd always -d ghtest

  createansiblecollection:
    runs-on: ubuntu-22.04
    needs: selectbranch

    steps:

      - name: Checkout
        uses: actions/checkout@v4
        with:
          repository: mafalb/skeletons
          path: skeletons
          ref: ${{ needs.selectbranch.outputs.ref }}

      - name: Create directory for collections
        run: mkdir ansible_collections

      - name: Collection | create a new collection with our skeleton
        working-directory: ansible_collections
        run: |
          ansible-galaxy collection init --collection-skeleton ../skeletons/ansible-collection-skeleton local.ci
          ansible-galaxy collection install -r local/ci/requirements.yml

      - name: Collectionrole | create a new role
        working-directory: ansible_collections
        run: |
          ansible-galaxy role init --role-skeleton ../skeletons/ansible-collection-role-skeleton role1 --init-path local/ci/roles
          cat - >local/ci/playbooks/ci.yml << EOF
          ---
          - name: A ci playbook
            hosts: localhost
            roles:
              - role: local.ci.role1
          EOF

      - name: Collection | Build the collection
        run: ansible-galaxy collection build ansible_collections/local/ci

      - name: Collection | Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ansible-collections-${{ needs.selectbranch.outputs.ref }}
          path: local-ci-0.1.0.tar.gz
          if-no-files-found: error
          overwrite: true

  ansiblecollection:
    needs:
      - selectbranch
      - createansiblecollection
    uses: ./.github/workflows/reusable-ansiblecollection.yml
    with:
      filename: local-ci-0.1.0.tar.gz
      targeted_branch: ${{ needs.selectbranch.outputs.ref }}

  molecule:
    needs:
      - selectbranch
      - createansiblecollection
    uses: ./.github/workflows/reusable-molecule.yml
    with:
      name: Molecule citest
      targeted_branch: ${{ needs.selectbranch.outputs.ref }}
      filename: local-ci-0.1.0.tar.gz
      hostname: ci-system
      target: ubuntu22
      scenario: default

  molecule_multiple_scenarios:
    needs:
      - selectbranch
      - createansiblecollection
    uses: ./.github/workflows/reusable-molecule.yml
    with:
      name: Molecule multiple scenarios
      targeted_branch: ${{ needs.selectbranch.outputs.ref }}
      filename: local-ci-0.1.0.tar.gz
      hostname: ci-system
      target: ubuntu22
      scenarios: "default, default"  # cheating!

  scenariocount:
    needs: molecule_multiple_scenarios
    runs-on: ubuntu-latest
    env:
      LOOPCOUNT: ${{ needs.molecule_multiple_scenarios.outputs.scenariocount }}
    steps:
      - name: Has looped two times
        run:
          # We tested two scenarios in the job before
          test "$LOOPCOUNT" = 2

  # A Collection to test systemd container with old cgroups v1 (centos7)
  #
  createansiblecollection2:
    runs-on: ubuntu-22.04
    needs:
      - selectbranch
      - scenariocount

    steps:

      - name: Checkout
        uses: actions/checkout@v4
        with:
          repository: mafalb/skeletons
          path: skeletons
          ref: ${{ needs.selectbranch.outputs.ref }}

      - name: Create directory for collections
        run: mkdir ansible_collections

      - name: Collection | create a new collection with our skeleton
        working-directory: ansible_collections
        run: |
          ansible-galaxy collection init --collection-skeleton ../skeletons/ansible-collection-skeleton local.ci2
          ansible-galaxy collection install -r local/ci2/requirements.yml

      - name: Collectionrole | create a new role
        working-directory: ansible_collections
        run: |
          ansible-galaxy role init --role-skeleton ../skeletons/ansible-collection-role-skeleton role1 --init-path local/ci2/roles
          cat - >local/ci2/playbooks/ci.yml << EOF
          ---
          - name: A ci playbook
            hosts: localhost
            roles:
              - role: local.ci2.role1
          EOF

          cat - >local/ci2/molecule/default/converge.yml << EOF
          ---
          - name: A ci playbook
            hosts: localhost
            tasks:
              - name: Get status of systemd-tmpfiles-setup.service  # noqa command-instead-of-module
                ansible.builtin.command: systemctl status systemd-tmpfiles-setup.service
                when: ansible_service_mgr == 'systemd'
                changed_when: false
          EOF

          cat - >local/ci2/molecule/Dockerfile-rhel7.j2 << EOF
          {% if item.registry is defined %}
          FROM {{ item.registry.url }}/{{ item.image }}
          {% else %}
          FROM {{ item.image }}
          {% endif %}

          STOPSIGNAL SIGRTMIN+3

          ENV container docker

          ENV LANG en_US.UTF-8
          ENV LC_ALL en_US.UTF-8

          {% if item.env is defined %}
          {% for var, value in item.env.items() %}
          {% if value %}
          ENV {{ var }} {{ value }}
          {% endif %}
          {% endfor %}
          {% endif %}

          RUN yum makecache fast && \
              yum install -y systemd python sudo yum-plugin-ovl bash iproute && \
              sed -i 's/plugins=0/plugins=1/g' /etc/yum.conf && yum clean all

          RUN if test -d /lib/systemd/system/sysinit.target.wants/ ; then\
              (cd /lib/systemd/system/sysinit.target.wants/; for i in *; do [ $i == systemd-tmpfiles-setup.service ] || \
              rm -f $i; done);\
           rm -f /lib/systemd/system/multi-user.target.wants/*;\
           rm -f /etc/systemd/system/*.wants/*;\
           rm -f /lib/systemd/system/local-fs.target.wants/*;\
           rm -f /lib/systemd/system/sockets.target.wants/*udev*;\
           rm -f /lib/systemd/system/sockets.target.wants/*initctl*;\
           rm -f /lib/systemd/system/basic.target.wants/*;\
           rm -f /lib/systemd/system/anaconda.target.wants/*;\
          fi

          RUN if test -d /lib/systemd/system/sysinit.target.wants/ ; then \
              ln -s /lib/systemd/system/systemd-user-sessions.service /lib/systemd/system/multi-user.target.wants/; fi

          VOLUME [ "/sys/fs/cgroup" ]
          CMD ["/lib/systemd/systemd"]
          EOF

      - name: Collection | Build the collection
        run: ansible-galaxy collection build ansible_collections/local/ci2

      - name: Collection | Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ansible-collections-${{ needs.selectbranch.outputs.ref }}
          path: local-ci2-0.1.0.tar.gz
          if-no-files-found: error
          overwrite: true

  molecule_cgroupsv1:
    needs:
      - selectbranch
      - createansiblecollection2
    uses: ./.github/workflows/reusable-molecule.yml
    with:
      name: Molecule cgroupv1
      target: centos7
      scenario: default
      hostname: ci-centos7
      filename: local-ci2-0.1.0.tar.gz
      targeted_branch: ${{ needs.selectbranch.outputs.ref }}

  allsuccess:
    if: success() || failure()
    uses: ./.github/workflows/reusable-allsuccess.yml
    with:
      joblist: ${{ toJSON(needs) }}
    needs:
      - lint
      - selectbranch
      - ansiblecollection_info
      - ansiblecollection_info_with_python
      - createansiblecollection
      - ansiblecollection
      - molecule
      - molecule_multiple_scenarios
      - createansiblecollection2
      - molecule_cgroupsv1
      - scenariocount
      - crun

...

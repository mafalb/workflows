# vim: set ft=yaml ts=2 expandtab:
#
# Copyright (c) Markus Falb <markus.falb@mafalb.at>
# GNU General Public License v3.0+
# see LICENSE or https://www.gnu.org/licenses/gpl-3.0.txt
---

name: ANSIBLECOLLECTION

on:  # yamllint disable-line rule:truthy

  # make it reusable
  workflow_call:
    inputs:
      targeted_branch:
        type: string
        required: true
      filename:
        type: string
      mock:
        type: boolean
        default: false

jobs:

  ansible-test:
    runs-on: ubuntu-22.04
    env:
      PY_COLORS: 1
      ANSIBLE_FORCE_COLOR: 1
      ANSIBLE_COLLECTIONS_PATH: "$HOME/.ansible/collections"

    strategy:
      fail-fast: false

      matrix:

        include:

          - ansible_version: '2.14'
            python_version: '3.9'

          - ansible_version: '2.14'
            python_version: '3.10'

          - ansible_version: '2.14'
            python_version: '3.11'

          - ansible_version: '2.15'
            python_version: '3.9'

          - ansible_version: '2.15'
            python_version: '3.10'

          - ansible_version: '2.15'
            python_version: '3.11'

          - ansible_version: '2.16'
            python_version: '3.10'

          - ansible_version: '2.16'
            python_version: '3.11'

          - ansible_version: '2.16'
            python_version: '3.12'

    steps:

      - name: Checkout workflows
        uses: actions/checkout@v4
        with:
          repository: mafalb/workflows
          path: workflows

      - name: setup python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python_version }}

      - name: Install Ansible
        uses: ./workflows/.github/actions/installansible
        with:
          ansible_version: ${{ matrix.ansible_version }}
          python_version: ${{ matrix.python_version }}
          ref: workflow

      - name: Download the collection artifact
        if: inputs.filename
        uses: actions/download-artifact@v4
        with:
          name: ansible-collections-${{ inputs.targeted_branch }}

      # Download the needed collections
      # We use ansible-galaxy, not actions/checkout
      #
      - name: Install the collection we want to test
        working-directory: ${{ github.workspace }}
        env:
          FILENAME: ${{ inputs.filename }}
          SERVER_URL: ${{ github.server_url }}
          CI_REPO: ${{ github.repository }}
          CI_REF: ${{ github.sha }}
        run: |
          # install the collection we want to test
          if test -n "$FILENAME"; then
              ansible-galaxy collection install "$FILENAME" -p collections
          else
              ansible-galaxy collection install git+"$SERVER_URL"/"$CI_REPO".git,"$CI_REF" -p collections
          fi

      - name: Get Info
        id: info
        env:
          CI_REPO: ${{ github.repository }}
          CI_REF: ${{ github.sha }}
          SERVER: raw.githubusercontent.com
        uses: ./workflows/.github/actions/ansiblecollectioninfo
        with:
          targeted_branch: ${{ github.sha }}
          filename: ${{ inputs.filename }}
          python_version: ${{ matrix.python_version }}

      - name: Set working directory
        env:
          namespace: ${{ steps.info.outputs.namespace }}
          collection_name: ${{ steps.info.outputs.collection_name }}
        run: |
          test -n "$namespace"
          test -n "$collection_name"
          # we use info from galaxy.yml in above Get Info step
          # be paranoid
          cd collections/ansible_collections/$namespace/$collection_name
          pwd
          tree
          grep ^galaxy.yml .github/CODEOWNERS
          echo "working-directory=collections/ansible_collections/$namespace/$collection_name" >>$GITHUB_ENV

      - name: yamllint
        working-directory: ${{ env.working-directory }}
        run: |
          pwd
          tree .
          source ~/.virtualenvs/ansible/bin/activate
          yamllint -s .

      - name: lint
        working-directory: ${{ env.working-directory }}
        env:
          ANSIBLE_COLLECTIONS_PATH: "$GITHUB_WORKSPACE/collections:${{ env.ANSIBLE_COLLECTIONS_PATH }}"
        run: |
          source ~/.virtualenvs/ansible/bin/activate
          mkdir /tmp/collections
          echo ansible-galaxy
          set -x
          ansible-galaxy collection list
          ANSIBLE_LINT_VERSION=$(NO_COLOR=1 ansible-lint --version | awk '/^ansible-lint / {print $2}')
          if [[ "$ANSIBLE_LINT_VERSION" =~ ^4 ]]; then
              if test -f .ansible-lint-4; then
                  echo "ansible-lint -c .ansible-lint-4 $ANSIBLE_LINT_VERSION..."
                  ansible-lint -v -c .ansible-lint-4
              fi
          elif test "${ANSIBLE_LINT_VERSION}" == "6.8.6" -a -f .ansible-lint-6.8.6; then
              echo "ansible-lint $ANSIBLE_LINT_VERSION..."
              ansible-lint -v --offline -c .ansible-lint-6.8.6
          elif test -f .ansible-lint-"$ANSIBLE_LINT_VERSION"; then
              echo "ansible-lint -c .ansible-lint-$ANSIBLE_LINT_VERSION..."
              ansible-lint -v -c .ansible-lint-"$ANSIBLE_LINT_VERSION"
          else
              echo "ansible-lint $ANSIBLE_LINT_VERSION..."
              ansible-lint -v
          fi

      - name: install shellcheck
        run: sudo apt-get install shellcheck

      - name: sanity
        working-directory: ${{ env.working-directory }}
        run: |
          source ~/.virtualenvs/ansible/bin/activate
          if test "${{ matrix.ansible_version }}" = "2.12"
          then
            # I dont know how to set collections path for ansible-doc
            # so i skip ansible-doc test
            #
            ansible-test sanity --skip-test ansible-doc --requirements --python ${{ matrix.python_version }}
          else
            ansible-test sanity --requirements --python ${{ matrix.python_version }}
          fi

      - name: unit tests
        working-directory: ${{ env.working-directory }}
        run: |
          source ~/.virtualenvs/ansible/bin/activate
          ansible-test units --coverage --requirements --python ${{ matrix.python_version }}

      - name: integration tests
        working-directory: ${{ env.working-directory }}
        run: |
          source "$HOME/.virtualenvs/ansible/bin/activate"
          ansible-test integration --requirements --python ${{ matrix.python_version }}

      - name: mock a role to make documentation test pass
        if: matrix.ansible_version != 2.12 and ${{ inputs.mock }} == true
        working-directory: ${{ env.working-directory }}
        run: |
          mkdir -p roles/role1
          mkdir -p roles/role1/{meta,tasks}
          echo -en "---\nargument_specs:\n  main:\n    " >roles/role1/meta/main.yml
          echo -en "short_description: Bla\n    description:\n      " >>roles/role1/meta/main.yml
          echo -en "- Bla\n" >>roles/role1/meta/main.yml

      - name: docs
        if: matrix.ansible_version != '2.12'
        working-directory: ${{ env.working-directory }}
        env:
          ANSIBLE_COLLECTIONS_PATH: "$GITHUB_WORKSPACE/collections:${{ env.ANSIBLE_COLLECTIONS_PATH }}"
        run: |
          source ~/.virtualenvs/ansible/bin/activate
          test -r "$VIRTUAL_ENV"/constraints.txt
          test -n "${{ env.namespace }}"
          test -n "${{ env.collection_name }}"
          # test -n "$ANSIBLE_COLLECTIONS_PATH"
          ABSPATH=$(cd ../../; dirname "$(pwd)")
          #export ANSIBLE_COLLECTIONS_PATH="$ABSPATH:/tmp/collections"
          #export ANSIBLE_COLLECTIONS_PATHS="$ABSPATH:/tmp/collections"
          #ansible-galaxy collection install community.general -p /tmp/collections
          #ansible-galaxy collection install community.general
          mkdir -p tests/output/doc
          antsibull-docs sphinx-init --use-current \
            --copyright "Markus Falb (c) <markus.falb@mafalb.at> GPL-3.0-or-later" \
            --dest-dir tests/output/doc ${{ env.namespace }}.${{ env.collection_name }}
          echo VIRTUAL_ENV $VIRTUAL_ENV
          echo $ANSIBLE_COLLECTIONS_PATH
          #antsibull-docs lint-collection-docs --plugin-docs --no-skip-rstcheck .
          echo gugu
          cd tests/output/doc
          pip install -r requirements.txt -c "$VIRTUAL_ENV"/constraints.txt
          echo ogo
          ./build.sh
          echo bla

...
